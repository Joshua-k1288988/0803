/*SELECT CategoryID, ProductID, ProductName, UnitPrice, UnitPrice - (SELECT AVG (UnitPrice) FROM products 
    WHERE CategoryID = 1) as diffPrice FROM `products`*/

SELECT CategoryID, (SELECT p.categoryID), ProductID, ProductName, UnitPrice, UnitPrice - (SELECT AVG (UnitPrice)
 FROM products 
 WHERE CategoryID = p.categoryID) as diffPrice FROM `products` AS p


SELECT COUNT(*) FROM employees

SELECT COUNT(reportsto)
 FROM employees

 SELECT * FROM `products` ORDER BY `CategoryID`
 SELECT AVG(UnitPrice), categoryID FROM `products` GROUP BY `CategoryID`
 SELECT AVG(UnitPrice) AS AvgPrice, categoryID FROM `products` GROUP BY `CategoryID` HAVING AvgPrice>=30

 SELECT *, SUM(Quantity) FROM `order details` GROUP BY OrderID
 SELECT * FROM `order details` ORDER BY OrderID, ProductID
 SELECT OrderID, ProductID, SUM(Quantity) FROM `order details` GROUP BY OrderID, ProductID
 SELECT OrderID, ProductID, SUM(Quantity) FROM `order details` GROUP BY OrderID, ProductID WITH ROLLUP


340
SELECT CategoryID, SUM(UnitsInStock * UnitPrice) as '庫存成本' FROM `products` GROUP BY CategoryID
 SELECT CategoryID, UnitsInStock, UnitPrice, SUM(UnitsInStock * UnitPrice) as '庫存成本' FROM `products` GROUP BY CategoryID WITH ROLLUP

350
 SELECT CategoryID, SUM(UnitsInStock * UnitPrice) as '庫存成本' FROM `products` GROUP BY CategoryID HAVING SUM(UnitsInStock * UnitPrice)>12000

360
    SELECT OrderID, ProductID, Quantity, SUM(Quantity) FROM `order details` GROUP BY OrderID, ProductID WITH ROLLUP


SELECT CategoryID, ProductName, SUM(UnitsInStock) 
FROM `products` 
GROUP BY CategoryID, ProductName

SELECT CategoryID, ProductName, SUM(UnitsInStock) 
FROM `products` 
GROUP BY CategoryID, ProductName WITH ROLLUP


410
SELECT ProductID, ProductName, SupplierID FROM products

420
SELECT ProductID, ProductName, p.SupplierID, CompanyName, Phone, ContactName 
FROM products AS p JOIN suppliers AS s
ON p.SupplierID = s.SupplierID  /*比較p.SupplierID = s.SupplierID
ORDER By p.SupplierID




SELECT c.CustomerID, CompanyName, p.ProductID, productName 
FROM customers c 
JOIN orders o ON o.CustomerID = c.CustomerID
JOIN `order details` od on od.OrderID = o.OrderID
JOIN products p on p.ProductID = od.ProductID
ORDER BY c.CustomerID , p.ProductID



select * from 
(select * from orders order by OrderDate desc limit 10 )
as T ORDER BY OrderDate asc


510
SELECT * FROM orders WHERE OrderID in 
(
    SELECT OrderID FROM `order details`
	WHERE ProductID = 23 and Quantity > 20
)